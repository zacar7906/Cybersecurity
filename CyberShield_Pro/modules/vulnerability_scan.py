import subprocess
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QTextEdit, QLineEdit, QLabel, QComboBox
from PyQt5.QtCore import QThread, pyqtSignal

class VulnerabilityScanThread(QThread):
    # Señales para comunicar resultados y errores
    result_signal = pyqtSignal(str)
    error_signal = pyqtSignal(str)

    def __init__(self, target_ip, scan_type):
        super().__init__()
        self.target_ip = target_ip
        self.scan_type = scan_type

    def run(self):
        try:
            # Elegir el comando de escaneo según el tipo seleccionado
            if self.scan_type == "Escaneo de servicios (-sV)":
                command = ['nmap', '-sV', self.target_ip]
            elif self.scan_type == "Escaneo de puertos (-p)":
                command = ['nmap', '-p-', self.target_ip]
            elif self.scan_type == "Escaneo completo (-A)":
                command = ['nmap', '-A', self.target_ip]
            else:
                raise ValueError("Tipo de escaneo desconocido")

            # Ejecutar el comando
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = process.communicate()

            # Verificar si hay errores
            if process.returncode != 0:
                self.error_signal.emit(err.decode())
            else:
                self.result_signal.emit(out.decode())

        except Exception as e:
            self.error_signal.emit(str(e))


class VulnerabilityScanTab(QWidget):
    def __init__(self):
        super().__init__()

        # Crear el diseño de la interfaz
        layout = QVBoxLayout()

        # Campo para ingresar la IP o URL
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("Ingrese IP o URL para escanear")

        # Selector de tipo de escaneo
        self.scan_type_combo = QComboBox()
        self.scan_type_combo.addItems(["Escaneo de servicios (-sV)", "Escaneo de puertos (-p)", "Escaneo completo (-A)"])

        # Botón para iniciar el escaneo
        self.scan_button = QPushButton('Iniciar Escaneo')
        self.scan_button.clicked.connect(self.start_scan)

        # Área de texto para mostrar los resultados
        self.result_area = QTextEdit()
        self.result_area.setReadOnly(True)

        # Mensaje de estado
        self.status_label = QLabel("Estado: Esperando escaneo...")

        # Añadir widgets al layout
        layout.addWidget(QLabel("IP o URL de destino:"))
        layout.addWidget(self.target_input)
        layout.addWidget(QLabel("Seleccione el tipo de escaneo:"))
        layout.addWidget(self.scan_type_combo)
        layout.addWidget(self.scan_button)
        layout.addWidget(self.status_label)
        layout.addWidget(self.result_area)
        self.setLayout(layout)

    def start_scan(self):
        target_ip = self.target_input.text()

        # Validación básica de entrada
        if not target_ip:
            self.status_label.setText("Error: Ingrese una IP o URL válida.")
            return

        scan_type = self.scan_type_combo.currentText()

        # Actualizar el estado
        self.status_label.setText("Estado: Escaneando...")

        # Iniciar el escaneo en un hilo separado
        self.scan_thread = VulnerabilityScanThread(target_ip, scan_type)
        self.scan_thread.result_signal.connect(self.display_results)
        self.scan_thread.error_signal.connect(self.display_error)
        self.scan_thread.start()

    def display_results(self, results):
        self.status_label.setText("Estado: Escaneo completado.")
        self.result_area.setText(results)

    def display_error(self, error_message):
        self.status_label.setText("Estado: Error durante el escaneo.")
        self.result_area.setText(f"Error: {error_message}")
